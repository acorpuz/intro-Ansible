#!/bin/bash

# File name: check_repo.sh
# ############################################################################
# Description:  Script to search for changes in a remote git repo and if
#               changes are found, pulls the changes and executes other code
#               (i.e. restarts a service)
#               Add to cron as needed
#               */15 * * * * root bash /opt/Rapsodoo/check_repo.sh
#
# ----------------------------------------------------------------------------
# Rapsodoo Italia srl
# Created on 2020-12-12 by Angel Corpuz (angel.corpuz(AT)rapsodoo.com)
#
# 2021-05-24 - added more options to get/update module in conf file
# 2021-06-01    updated script to search for addondirs and to install pip
#               requirements; new update list generation usong manifest files.
# 2021-09-06 -  better enumeration of modules that need to be updated
# 2022-05-23 -  force updating all dbs before restarting odoo, use a lockfile
#               to avoid re-running the script.s
# 2023-10-04 -  on odoo restart all dbs are updated unless a specific db
#               name is passed to script; add option to update Odoo codebase
# 2023-10-10 -  refactor updating odoo.conf with addons path in a function, this
#               allows it to be called indipendently from updates to the repo
# 2024-01-24 -  Checks for virtualenv variable in template to allow for both
#               types of Odoo installs (with and without virtualenv)
# ############################################################################
#set -x
readonly ODOO_DIR="{{ base_dir }}/odoo"
readonly ODOO_ENT_DIR="{{ base_dir }}/enterprise"
readonly CUSTOM_ADDON_PATH="{{ custom_dir }}"
readonly ODOO_THEMES="{{ base_dir }}/odoo_themes"

readonly GIT_TOKEN="{{ GIT_TOKEN }}"
readonly DISCORD_WEBHOOK="{{ discord_hook }}"


# Checks that depend on python virtual environments, if virtual environments
# are not used (venv_path is not defined or not set/empty) don't add it to PATH
{% if venv_path is defined and venv_path|length %}
if [ -d {{ venv_path }}/bin ]; then
    PATH={{ venv_path }}/bin:$PATH
fi
{% endif %}


# explicit program path
PSQL="/usr/bin/psql"

update_submodule_urls(){
    # Updates the submodule remote URL to use the deploy token instead of ssh
    # Uses the following command:
    #  git config submodule.<submodule/path>.url https://ghp_1234567890aAaAaAaAaAaAaAaAaAaAaAaAaA@github.com/saydigital/<repository_name>.git

    # Get all submodules with 'git@github.com:' in path, substitute the https+token URL
    for i in $(git config --file .git/config --get-regexp url | grep submodule | grep 'git@github.com:' | awk '{ print $1 }'); do
        git config "$i"  "https://${GIT_TOKEN}@github.com/$(git config --file .git/config --get-regexp url | grep "$i" | grep 'git@github.com:' | cut -f2 -d':')"
    done
}

update_odoo_files(){
    # Updates odoo base files and enterprise repos to latest commit
    local curr_dir
    curr_dir="$(pwd)"
    for i in $ODOO_DIR $ODOO_ENT_DIR $ODOO_THEMES; do
        if [ -e "$i" ]; then
            cd "$i" || exit
            git pull
        fi
    done
    cd "$curr_dir" || exit
}

update_addons_path(){
    local curr_dir
    curr_dir="$(pwd)"
    # make sure we are in the correct directory
    cd "$CUSTOM_ADDON_PATH" || exit 1

    # Get all custom addons modules path and add the to the odoo.conf file
    # Build the path list including the Enterprise odoo dir and the common odoo/addons dir
    ADDONDIRS="${CUSTOM_ADDON_PATH}"
    if [ -e "$ODOO_ENT_DIR" ]; then
        ADDONDIRS="${ADDONDIRS},${ODOO_ENT_DIR}"
    fi
    # Submodules
    for i in $(git submodule status | cut -f3 -d " "); do
        ADDONDIRS="${ADDONDIRS},${CUSTOM_ADDON_PATH}/${i}"
    done
    ADDONDIRS="${ADDONDIRS},${ODOO_DIR}/addons"
    if [ -e "$ODOO_THEMES" ]; then
        ADDONDIRS="${ADDONDIRS},${ODOO_THEMES}"
    fi

    # find the used configuration file from the odoo process, update this
    CONFIGURATION_FILE=$(find /etc/Rapsodoo -name "*.conf" )
    # shellcheck disable=SC2140
    sed -i s@"addons_path = .*"@"addons_path = $ADDONDIRS"@g "$CONFIGURATION_FILE"
    cd "$curr_dir" || exit
}

show_usage(){
    echo -e "Usage:\t$(basename "$0") [-u][-a][-p][-d database_name]"
    echo "Options:"
    echo "  -u    Also update Odoo base and enterprise files to latest commit;"
    echo "        usually when run manually."
    echo "  -a    Run --update=all on dbs (default: only update changed modules)"
    echo "  -p    Only update addon path in conf file and exit; this option ignores all other options"
    echo "  -d    Only update this db (default: update all dbs)"
    echo "Script that looks for changes in a remote Odoo git repo;"
    echo "if changes are found, pulls the changes and updates config files."
    echo " "
    echo "If run using the -p option, it will only update the addons_path in the odoo configuration file."
    exit 0
}

# set default options
UPDATE_ODOO=0
UPDATE_ALL=0
UPDATE_ADDONS=0
TARGET_DB=""

while getopts "huapd:" arg; do
    case ${arg} in
        h) show_usage ;;
        u) UPDATE_ODOO=1;;
        a) UPDATE_ALL=1;;
        p) UPDATE_ADDONS=1;;
        d) TARGET_DB=${OPTARG};;
        *) break ;;
    esac
done
shift $(("$OPTIND" - 1))

# create lockfile
exec {lock_fd}>./check_repo.lock || exit 1
# obtains a lock on file descriptor 100 holding a lock on the file until the shell closes
flock -n "$lock_fd" || { echo "ERROR: $0 is already running. Exiting." >&2; exit 1; }

cd "$CUSTOM_ADDON_PATH" || exit 1
# If only addons path update is requested do it and exit
if [ "$UPDATE_ADDONS" == "1" ]; then
    git submodule init
    update_submodule_urls
    git submodule update
    update_addons_path
else
    # Get latest updates
    git fetch
    # Check if a pull is needed (compare commit ids)
    # shellcheck disable=SC1083
    if [ ! "$(git rev-parse HEAD)" = "$(git rev-parse @{u})" ]; then
        # repo needs pulling, stop odoo
        systemctl stop odoo
        git pull
        # also update submodules if needed
        git submodule init
        update_submodule_urls
        git submodule update
        # update odoo files if requested
        if [ "$UPDATE_ODOO" == "1" ]; then
            update_odoo_files
        fi
        update_addons_path

        # get changed modules, add them to the odooenv file for updates
        # look for manifest files to get the module name
        updatelist=$(for i in $(git diff --name-only HEAD HEAD~1 | awk -F "/" '{print $1}' | uniq | paste -sd" "); do find "$i" -type f -name "__manifest__.py" -exec dirname {} \;  | awk -F "/" '{print $NF}'| uniq| tr "\n" ","  ; done)
        # remove last comma
        updatelist=$(echo "$updatelist" | sed '$s/.$//')
        echo MODULES=\""$updatelist"\" > /etc/Rapsodoo/odooenv


        # Check for all requirements and install them
        find .  -name "requirements.txt" -exec pip3 install -q -r {} \;

        # read connection info from config file
        tmp_vals=$(grep -e 'db_user\|db_host\|db_password' "$CONFIGURATION_FILE")
        db_user=$(echo "$tmp_vals" | awk -F "= " '/db_user/ {print $2}')
        db_host=$(echo "$tmp_vals" | awk -F "= " '/db_host/ {print $2}')
        db_pass=$(echo "$tmp_vals" | awk -F "= " '/db_password/ {print $2}')

        # Check if we passed a specific db, else get all dbs  in installation (typically 1 in prod and 1+ in testing)
        # get all dbs
        db_list=$(PGPASSWORD="$db_pass" "$PSQL" --host="$db_host" --username="$db_user" --dbname=postgres \
            -tAc "SELECT datname FROM pg_database JOIN pg_roles ON pg_database.datdba = pg_roles.oid \
            WHERE rolname = CURRENT_USER;")
        if [ -n "$TARGET_DB" ]; then
            # we must operate on a specific db, check if db exists before updating db_list
            if grep -q "$TARGET_DB" <<< "$db_list"; then
                db_list="$TARGET_DB"
            else
                echo "DB ${TARGET_DB} not found!! NO updates will be run, please run any updates manually"
                db_list=""
            fi
        fi
        if [ $UPDATE_ALL == "1" ]; then
            # We do this now to preserve the original list and this is the last place where $updatelist is used.
            updatelist="all"
        fi
        for db in $db_list; do
            su - "$db_user" -c "python3 ${ODOO_DIR}/odoo-bin --config $CONFIGURATION_FILE -d ${db} --update=${updatelist} --stop-after-init"
        done

        # restart odoo
        systemctl start odoo
        # Update discord status (need correct channel webhook)
        discord_msg=$(git log -n1 --pretty=format:'Deployed commit [%h]: %s \n(%cr by <%an>)')
        if [ -z "$db_list" ]; then
            discord_msg="${discord_msg}\nNOTE!! No database has been updated."
        fi
        curl -H "Content-Type: application/json" -X POST -d '{"content" : "'"$discord_msg"'"}' "$DISCORD_WEBHOOK"
    fi
fi
